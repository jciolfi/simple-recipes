{"version":3,"sources":["Player.js","Game.js","CreatePlayer.js","CreateGame.js","App.js","reportWebVitals.js","index.js"],"names":["Player","useState","playerData","setPlayerData","playerId","setPlayerId","playerIds","setPlayerIds","useEffect","fetch","then","res","a","json","data","ids","dataAsJSON","fetchData","style","marginLeft","id","onChange","e","target","value","map","pi","String","playerName","totalScore","averageScore","totalWins","width","borderCollapse","backgroundColor","allPlayerTakes","t","gameNumber","takes","join","Game","gameData","setGameData","setGameNumber","gameNumbers","setGameNumbers","game","players","console","log","player","find","p","name","CreatePlayer","setPlayerName","type","onKeyDown","key","method","body","JSON","stringify","headers","CreateGame","setPlayers","currPlayerId","setCurrPlayerId","currPlayerTakes","setCurrPlayerTakes","errorMessage","setErrorMessage","color","Number","marginRight","onClick","concat","split","marginTop","i","obj","forEach","ok","error","App","to","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ace4e4f.chunk.js","sourcesContent":["import \"./Player.css\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\n\nexport default function Player() {\n  const [playerData, setPlayerData] = useState({});\n  const [playerId, setPlayerId] = useState(1);\n  const [playerIds, setPlayerIds] = useState([]);\n\n  useEffect(() => {\n    fetch(\"http://localhost:8080/playerIds\").then(async (res) => {\n      const data = await res.json();\n      setPlayerIds(data.ids);\n      setPlayerId(data.ids[0]);\n    });\n  }, []);\n\n  useEffect(() => {\n    async function fetchData() {\n      const data = await fetch(\n        `http://localhost:8080/player?playerId=${playerId}`\n      );\n      const dataAsJSON = await data.json();\n      setPlayerData(dataAsJSON);\n    }\n    fetchData();\n  }, [playerId]);\n\n  function selectFunc(e) {\n    setPlayerId(e.target.value);\n  }\n\n  return playerData ? (\n    <div style={{ marginLeft: \"20px\" }}>\n      <select id=\"playerSelector\" onChange={selectFunc}>\n        {playerIds.map((pi) => (\n          <option key={pi} value={String(pi)}>\n            {pi}\n          </option>\n        ))}\n      </select>\n      <br />\n\n      <b>Name: </b>\n      {playerData.playerName}\n      <br />\n      <b>Total Points: </b>\n      {playerData.totalScore}\n      <br />\n      <b>Average Points: </b>\n      {playerData.averageScore}\n      <br />\n      <b>Total Wins: </b>\n      {playerData.totalWins}\n      <br />\n      <b>Takes: </b>\n      <table style={{ width: \"90%\", borderCollapse: \"collapse\" }}>\n        <thead>\n          <tr style={{ backgroundColor: \"white\" }}>\n            <th>Game Number</th>\n            <th>Takes</th>\n          </tr>\n        </thead>\n        <tbody>\n          {playerData.allPlayerTakes?.map((t) => (\n            <tr key={t.gameNumber}>\n              <td>{t.gameNumber}</td>\n              <td>{t.takes.join(\", \")}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  ) : null;\n}\n","import \"./Player.css\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\n\nexport default function Game() {\n  const [gameData, setGameData] = useState({});\n  const [gameNumber, setGameNumber] = useState(1);\n  const [gameNumbers, setGameNumbers] = useState([]);\n\n  useEffect(() => {\n    fetch(\"http://localhost:8080/gameNumbers\").then(async (res) => {\n      const data = await res.json();\n      setGameNumbers(data.ids);\n      setGameNumber(data.ids[0]);\n    });\n  }, []);\n\n  useEffect(() => {\n    async function fetchData() {\n      const data = await fetch(`http://localhost:8080/game?gameNumber=${gameNumber}`);\n      const dataAsJSON = await data.json();\n      setGameData(dataAsJSON);\n    }\n    fetchData();\n  }, [gameNumber]);\n\n  function selectFunc(e) {\n    setGameNumber(e.target.value);\n  }\n\n  const { game, players } = gameData;\n  console.log(game, players);\n\n  return gameData && game && players ? (\n    <div style={{ marginLeft: \"20px\" }}>\n      <select id=\"playerSelector\" onChange={selectFunc}>\n        {gameNumbers.map((pi) => (\n          <option key={pi} value={String(pi)}>\n            {pi}\n          </option>\n        ))}\n      </select>\n      <br />\n      <br />\n\n      <b>Game Number: </b>\n      {game?.gameNumber}\n      <br />\n      <br />\n\n      <b>Player Stats: </b>\n      <table style={{ width: \"90%\", borderCollapse: \"collapse\" }}>\n        <thead>\n          <tr style={{ backgroundColor: \"white\" }}>\n            <th>Player Name</th>\n            <th>Takes</th>\n          </tr>\n        </thead>\n        <tbody>\n          {game.players?.map((player) => (\n            <tr key={player}>\n              <td>{players.find((p) => p.id === player).name}</td>\n              <td>{game.takes[player].join(\", \")}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  ) : null;\n}\n","import \"./Player.css\";\nimport React from \"react\";\nimport { useState } from \"react\";\n\nexport default function CreatePlayer() {\n  const [playerName, setPlayerName] = useState(\"\");\n\n  return (\n    <div style={{marginLeft: \"20px\"}}>\n      <div>Input Player Name</div>\n      <input\n        type=\"text\"\n        value={playerName}\n        onKeyDown={async (e) => {\n          if (e.key === \"Enter\") {\n            await fetch(\"http://localhost:8080/player\", {\n              method: \"POST\",\n              body: JSON.stringify({\n                name: playerName,\n              }),\n              headers: {\n                \"Content-Type\": \"application/json\",\n              },\n            });\n            setPlayerName(\"\");\n          }\n        }}\n        onChange={(e) => {\n          setPlayerName(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n","import \"./Player.css\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\n\nexport default function CreateGame() {\n  const [players, setPlayers] = useState([]);\n  const [currPlayerId, setCurrPlayerId] = useState(0);\n  const [currPlayerTakes, setCurrPlayerTakes] = useState(\"\");\n  const [playerIds, setPlayerIds] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  useEffect(() => {\n    fetch(\"http://localhost:8080/playerIds\").then(async (res) => {\n      const data = await res.json();\n      setPlayerIds(data.ids);\n      setCurrPlayerId(data.ids[0]);\n    });\n  }, []);\n\n  return (\n    <div>\n      <div style={{ color: \"red\", marginLeft: \"50px\" }}>{errorMessage}</div>\n      <select\n        id=\"playerSelector\"\n        onChange={(e) => {\n          setCurrPlayerId(Number(e.target.value));\n        }}\n        style={{ marginRight: \"20px\", marginLeft: \"50px\" }}\n      >\n        {playerIds.map((pi) => (\n          <option key={pi} value={String(pi)}>\n            {pi}\n          </option>\n        ))}\n      </select>\n      <input\n        type=\"text\"\n        value={currPlayerTakes}\n        onChange={(e) => {\n          setCurrPlayerTakes(e.target.value);\n        }}\n        style={{ marginRight: \"20px\" }}\n      />\n      <button\n        type=\"button\"\n        onClick={() => {\n          setPlayers(\n            players.concat({\n              id: currPlayerId,\n              takes: currPlayerTakes.split(\",\").map((e) => Number(e)),\n            })\n          );\n          setCurrPlayerId(playerIds[0]);\n          setCurrPlayerTakes(\"\");\n        }}\n        style={{ marginRight: \"20px\" }}\n      >\n        Add Player\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setPlayers([]);\n        }}\n        style={{ marginRight: \"20px\" }}\n      >\n        Clear Players\n      </button>\n      <table\n        style={{\n          width: \"80%\",\n          borderCollapse: \"collapse\",\n          marginLeft: \"50px\",\n          marginTop: \"20px\",\n        }}\n      >\n        <thead>\n          <tr style={{ backgroundColor: \"white\" }}>\n            <th>Player Name</th>\n            <th>Takes</th>\n          </tr>\n        </thead>\n        <tbody>\n          {players?.map((player, i) => {\n            return (\n              <tr key={i}>\n                <td>{player.id}</td>\n                <td>{player.takes.join(\",\")}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      <button\n        style={{ marginLeft: \"50px\", marginTop: \"50px\" }}\n        type=\"button\"\n        onClick={async () => {\n          const obj = {};\n          players.forEach((player) => {\n            obj[player.id] = player.takes;\n          });\n\n          await fetch(\"http://localhost:8080/game\", {\n            method: \"POST\",\n            body: JSON.stringify({\n              players: players.map((player) => player.id),\n              takes: obj,\n            }),\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          }).then(async (res) => {\n            if (!res.ok) {\n              const body = await res.json();\n              setErrorMessage(body.error);\n            } else {\n              setErrorMessage(\"\");\n            }\n            setPlayers([]);\n          });\n        }}\n      >\n        Create Game\n      </button>\n    </div>\n  );\n}\n","import \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport React from \"react\";\nimport Player from \"./Player\";\nimport Game from \"./Game\";\nimport CreatePlayer from \"./CreatePlayer\";\nimport CreateGame from \"./CreateGame\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/game\">Game</Link>\n            </li>\n            <li>\n              <Link to=\"/player\">Player</Link>\n            </li>\n            <li>\n              <Link to=\"/create_player\">Create Player</Link>\n            </li>\n            <li>\n              <Link to=\"/create_game\">Create Game</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Switch>\n          <Route path=\"/game\">\n            <Game />\n          </Route>\n          <Route path=\"/player\">\n            <Player />\n          </Route>\n          <Route path=\"/create_player\">\n            <CreatePlayer />\n          </Route>\n          <Route path=\"/create_game\">\n            <CreateGame />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}